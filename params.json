{"name":"fatso","tagline":"Fatso Package Manager","body":"# Fatso Package Manager\r\n\r\nFatso is a bundling package manager for compiled projects written in C. Think [Bundler](http://bundler.io/) for C/C++ projects.\r\n\r\nFatso downloads and builds all dependencies of your project, and installs them in a locally contained folder, so your project\r\ncan build and link against them with zero system dependencies.\r\n\r\nFatso supports the following build systems:\r\n\r\n- Autotools\r\n- CMake (TODO)\r\n- Plain GNU Make (TODO)\r\n- SCons (TODO)\r\n- bjam (TODO)\r\n- Custom scripts (TODO)\r\n\r\nFatso is still in very early stages of development.\r\n\r\n## Roadmap / Planned Features\r\n\r\n- Automatic build system detection.\r\n- Backends for common tool chains.\r\n- `pkg-config` integration (parsing and interpretation of .pc files).\r\n\r\n## Getting Started\r\n\r\nCreate a `fatso.yml` in your project. It's just a basic YAML-file specifying\r\nyour dependencies, and it could look like this:\r\n\r\n```\r\nproject: my_project\r\nversion: 0.0.1\r\nauthor: Simon Ask Ulsnes <simon@ulsnes.dk>\r\ndependencies:\r\n- ['libyaml', '~> 0.1.14']\r\n```\r\n\r\nThe above project has a single dependency: `libyaml`, at fuzzy version 0.1.4.\r\n\r\nTo install the dependencies after having modified `fatso.yml`, run:\r\n\r\n```\r\n$ fatso install\r\n```\r\n\r\nTo build your project, run:\r\n\r\n```\r\n$ fatso build\r\n```\r\n\r\nFatso will automatically detect the toolchain your project is using. If it fails\r\nto detect it, or your project needs special care while building, you have two\r\noptions:\r\n\r\n1. Tell Fatso about it, by setting `toolchain: <build command>` in your\r\n   `fatso.yml`. Fatso will set the CFLAGS/LDFLAGS environment variables with\r\n   the necessary options to build against your local Fatso environment, so if\r\n   your build tool takes those into account, you should be fine.\r\n\r\n2. Integrate Fatso into your existing build scripts by letting them call\r\n   `fatso cflags` and `fatso ldflags` in the relevant phases. Both commands\r\n   print the CFLAGS/LDFLAGS needed to build against your project's Fatso\r\n   environment.\r\n\r\n\r\n## Frequently Asked Questions\r\n\r\n### Will package XYZ be supported by Fatso?\r\n\r\nHard to say. Most \"well-behaved\" software packages, i.e. packages that build\r\naccording to the usual conventions and don't assume that they're installed\r\nin system-wide directories, should be trivial to support. Less well behaved\r\npackages may require special patches or upstream support to be buildable in an\r\nisolated environment.\r\n\r\n### Are Fatso projects relocatable?\r\n\r\nThat depends if all your dependencies are relocatable. To be certain, run\r\n`fatso clean` and `fatso install` after moving your project.\r\n\r\n\r\n## Dependencies\r\n\r\n- POSIX system (Linux, OS X)\r\n- GNU Make or compatible\r\n- C99 compiler (Clang or GCC should both work)\r\n- [libyaml](http://pyyaml.org/wiki/LibYAML)\r\n- [Git](http://git-scm.com/) (`git` tool must be in $PATH)\r\n- [curl](http://curl.haxx.se) (`curl` tool must be in $PATH)\r\n\r\n\r\n## Building\r\n\r\nRun `make`.\r\n\r\nRun `make test` to build and run tests.\r\n\r\n\r\n## Windows Support\r\n\r\nWindows support is not a priority at the moment, and design decisions will not be made with non-POSIX systems in mind. However,\r\npatches to accommodate POSIX layers on Windows such as Cygwin will be accepted.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}